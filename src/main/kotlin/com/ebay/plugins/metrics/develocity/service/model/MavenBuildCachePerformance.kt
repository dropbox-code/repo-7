/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.ebay.plugins.metrics.develocity.service.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * The build cache performance of a Maven build.
 *
 * @param id The Build Scan ID.
 * @param buildTime Wall clock duration of the build in milliseconds.
 * @param effectiveProjectExecutionTime Wall clock time spent executing projects in milliseconds. It is the time spent between the start of the first project execution and the end of the last project execution, removing any interval where no project is being executed.
 * @param serialProjectExecutionTime Wall clock time of all project executions in milliseconds. It is the sum of all individual project durations.
 * @param serializationFactor The ratio of `serialProjectExecutionTime` over the `effectiveProjectExecutionTime`. Quantifies the effect of project parallelization. A value equal to `1` means that no parallelization occurs. A value greater than `1` means that projects are executed faster due to parallelization.
 * @param goalExecution A list of executed goals with performance related information.
 * @param goalFingerprintingSummary 
 * @param avoidanceSavingsSummary 
 * @param buildCaches 
 */
@Serializable

data class MavenBuildCachePerformance (

    /* The Build Scan ID. */
    @SerialName(value = "id")
    val id: kotlin.String,

    /* Wall clock duration of the build in milliseconds. */
    @SerialName(value = "buildTime")
    val buildTime: kotlin.Long,

    /* Wall clock time spent executing projects in milliseconds. It is the time spent between the start of the first project execution and the end of the last project execution, removing any interval where no project is being executed. */
    @SerialName(value = "effectiveProjectExecutionTime")
    val effectiveProjectExecutionTime: kotlin.Long,

    /* Wall clock time of all project executions in milliseconds. It is the sum of all individual project durations. */
    @SerialName(value = "serialProjectExecutionTime")
    val serialProjectExecutionTime: kotlin.Long,

    /* The ratio of `serialProjectExecutionTime` over the `effectiveProjectExecutionTime`. Quantifies the effect of project parallelization. A value equal to `1` means that no parallelization occurs. A value greater than `1` means that projects are executed faster due to parallelization. */
    @SerialName(value = "serializationFactor")
    val serializationFactor: kotlin.Double,

    /* A list of executed goals with performance related information. */
    @SerialName(value = "goalExecution")
    val goalExecution: kotlin.collections.List<MavenBuildCachePerformanceGoalExecutionEntry>,

    @SerialName(value = "goalFingerprintingSummary")
    val goalFingerprintingSummary: MavenBuildCachePerformanceGoalFingerprintingSummary,

    @SerialName(value = "avoidanceSavingsSummary")
    val avoidanceSavingsSummary: MavenBuildCachePerformanceAvoidanceSavingsSummary,

    @SerialName(value = "buildCaches")
    val buildCaches: MavenBuildCachePerformanceBuildCaches? = null

)

