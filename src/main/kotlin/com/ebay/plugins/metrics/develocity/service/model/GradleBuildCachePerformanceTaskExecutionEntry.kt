/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.ebay.plugins.metrics.develocity.service.model


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * 
 *
 * @param taskPath The full task path.
 * @param taskType The fully qualified class name of the task.
 * @param avoidanceOutcome The avoidance outcome of this task with respect to performance:   * `avoided_up_to_date` - Task whose execution is avoided due to build incrementalism   * `avoided_from_local_cache` - Task whose execution is avoided due to reusing a local build cache entry   * `avoided_from_remote_cache` - Task whose execution is avoided due to reusing a remote build cache entry   * `executed_cacheable` - Task which is executed but is cacheable   * `executed_not_cacheable` - Task which is executed but is not cacheable   * `executed_unknown_cacheability` - Task which is executed and whose cacheability can not be determined   * `avoided_unknown_reason` - Task which was avoided for an unknown reason   * `lifecycle` - Lifecycle task   * `no-source` - No-source task   * `skipped` - Skipped task 
 * @param duration The task duration in milliseconds.
 * @param fingerprintingDuration The task fingerprinting duration in milliseconds. This duration is part of the complete task execution duration. `null` if the task is not fingerprinted, or the information is not available.
 * @param avoidanceSavings The task avoidance savings in milliseconds, which can be negative. Negative values indicate that it takes more time to reuse outputs than it did to create them originally. `null` if the information is not available.
 * @param nonCacheabilityCategory The category of the non-cacheability reason:   * `build_cache_not_enabled` - Caching is not enabled for the build   * `cache-if_condition_not_matched` - Caching is disabled for the task via `org.gradle.api.tasks.TaskOutputs#cacheIf`   * `disabled_to_ensure_correctness` - The task failed validation. Available since Gradle 7.0   * `do-not-cache-if_condition_matched` - Caching is disabled for the task via `org.gradle.api.tasks.TaskOutputs#doNotCacheIf`   * `multiple_outputs_declared` - The task declares multiple outputs   * `no_outputs_declared` - The task has no outputs declared   * `non_cacheable_inputs` - One of the task inputs is not cacheable, either because some type used as an input to the task is loaded via a custom classloader, or a Java lambda is used as an input. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_task_action` - One of the task actions is not cacheable, either because it is loaded via a custom classloader, or a Java lambda is used to implement it. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_task_implementation` - The task implementation is not cacheable, either because it is loaded via a custom classloader, or a Java lambda is used to implement it. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_tree_output` - The task has a `org.gradle.api.file.FileTree` or a `org.gradle.api.internal.file.collections.DirectoryFileTree` as an output. Available since Gradle 5.0   * `overlapping_outputs` - The tasks outputs overlaps with another task. As Gradle cannot safely determine which task each output file belongs to, it disables caching               * `task_has_no_actions` - The task does not declare any actions   * `task_output_caching_not_enabled` - Caching is not enabled for the task   * `unknown` - Reason for disabled caching is not known  `null` when the task is cacheable or if the information is not available. 
 * @param nonCacheabilityReason The human-readable reason for a non-cacheable task. `null` when the task is cacheable or if the information is not available.
 * @param skipReasonMessage The detailed reason why the task is skipped. `null` if the task is not skipped or Gradle versions <7.6 are used.
 * @param cacheArtifactSize The number of bytes of the produced or consumed cache artifact. For a task execution where the outputs are successfully stored to a local or remote cache, this is the size of the stored cache artifact. For a task execution where the outputs are successfully loaded from a local or remote cache, this is the size of the loaded cache artifact. `null` if the task is not cacheable, or if the attempt to store or load the artifact from cache does not succeed. 
 * @param cacheArtifactRejectedReason The reason why the cache artifact is rejected:   * `artifact_size_too_large` - The size of the artifact is larger than the remote build cache can accept.  The value is `null` if the task is not cacheable, or if the attempt to store the artifact does not succeed. 
 * @param cacheKey The build cache key. `null` if no build cache key was computed (e.g. when the task is skipped).
 */
@Serializable

data class GradleBuildCachePerformanceTaskExecutionEntry (

    /* The full task path. */
    @SerialName(value = "taskPath")
    val taskPath: kotlin.String,

    /* The fully qualified class name of the task. */
    @SerialName(value = "taskType")
    val taskType: kotlin.String,

    /* The avoidance outcome of this task with respect to performance:   * `avoided_up_to_date` - Task whose execution is avoided due to build incrementalism   * `avoided_from_local_cache` - Task whose execution is avoided due to reusing a local build cache entry   * `avoided_from_remote_cache` - Task whose execution is avoided due to reusing a remote build cache entry   * `executed_cacheable` - Task which is executed but is cacheable   * `executed_not_cacheable` - Task which is executed but is not cacheable   * `executed_unknown_cacheability` - Task which is executed and whose cacheability can not be determined   * `avoided_unknown_reason` - Task which was avoided for an unknown reason   * `lifecycle` - Lifecycle task   * `no-source` - No-source task   * `skipped` - Skipped task  */
    @SerialName(value = "avoidanceOutcome")
    val avoidanceOutcome: GradleBuildCachePerformanceTaskExecutionEntry.AvoidanceOutcome,

    /* The task duration in milliseconds. */
    @SerialName(value = "duration")
    val duration: kotlin.Long,

    /* The task fingerprinting duration in milliseconds. This duration is part of the complete task execution duration. `null` if the task is not fingerprinted, or the information is not available. */
    @SerialName(value = "fingerprintingDuration")
    val fingerprintingDuration: kotlin.Long? = null,

    /* The task avoidance savings in milliseconds, which can be negative. Negative values indicate that it takes more time to reuse outputs than it did to create them originally. `null` if the information is not available. */
    @SerialName(value = "avoidanceSavings")
    val avoidanceSavings: kotlin.Long? = null,

    /* The category of the non-cacheability reason:   * `build_cache_not_enabled` - Caching is not enabled for the build   * `cache-if_condition_not_matched` - Caching is disabled for the task via `org.gradle.api.tasks.TaskOutputs#cacheIf`   * `disabled_to_ensure_correctness` - The task failed validation. Available since Gradle 7.0   * `do-not-cache-if_condition_matched` - Caching is disabled for the task via `org.gradle.api.tasks.TaskOutputs#doNotCacheIf`   * `multiple_outputs_declared` - The task declares multiple outputs   * `no_outputs_declared` - The task has no outputs declared   * `non_cacheable_inputs` - One of the task inputs is not cacheable, either because some type used as an input to the task is loaded via a custom classloader, or a Java lambda is used as an input. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_task_action` - One of the task actions is not cacheable, either because it is loaded via a custom classloader, or a Java lambda is used to implement it. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_task_implementation` - The task implementation is not cacheable, either because it is loaded via a custom classloader, or a Java lambda is used to implement it. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_tree_output` - The task has a `org.gradle.api.file.FileTree` or a `org.gradle.api.internal.file.collections.DirectoryFileTree` as an output. Available since Gradle 5.0   * `overlapping_outputs` - The tasks outputs overlaps with another task. As Gradle cannot safely determine which task each output file belongs to, it disables caching               * `task_has_no_actions` - The task does not declare any actions   * `task_output_caching_not_enabled` - Caching is not enabled for the task   * `unknown` - Reason for disabled caching is not known  `null` when the task is cacheable or if the information is not available.  */
    @SerialName(value = "nonCacheabilityCategory")
    val nonCacheabilityCategory: GradleBuildCachePerformanceTaskExecutionEntry.NonCacheabilityCategory? = null,

    /* The human-readable reason for a non-cacheable task. `null` when the task is cacheable or if the information is not available. */
    @SerialName(value = "nonCacheabilityReason")
    val nonCacheabilityReason: kotlin.String? = null,

    /* The detailed reason why the task is skipped. `null` if the task is not skipped or Gradle versions <7.6 are used. */
    @SerialName(value = "skipReasonMessage")
    val skipReasonMessage: kotlin.String? = null,

    /* The number of bytes of the produced or consumed cache artifact. For a task execution where the outputs are successfully stored to a local or remote cache, this is the size of the stored cache artifact. For a task execution where the outputs are successfully loaded from a local or remote cache, this is the size of the loaded cache artifact. `null` if the task is not cacheable, or if the attempt to store or load the artifact from cache does not succeed.  */
    @SerialName(value = "cacheArtifactSize")
    val cacheArtifactSize: kotlin.Long? = null,

    /* The reason why the cache artifact is rejected:   * `artifact_size_too_large` - The size of the artifact is larger than the remote build cache can accept.  The value is `null` if the task is not cacheable, or if the attempt to store the artifact does not succeed.  */
    @SerialName(value = "cacheArtifactRejectedReason")
    val cacheArtifactRejectedReason: GradleBuildCachePerformanceTaskExecutionEntry.CacheArtifactRejectedReason? = null,

    /* The build cache key. `null` if no build cache key was computed (e.g. when the task is skipped). */
    @SerialName(value = "cacheKey")
    val cacheKey: kotlin.String? = null

) {

    /**
     * The avoidance outcome of this task with respect to performance:   * `avoided_up_to_date` - Task whose execution is avoided due to build incrementalism   * `avoided_from_local_cache` - Task whose execution is avoided due to reusing a local build cache entry   * `avoided_from_remote_cache` - Task whose execution is avoided due to reusing a remote build cache entry   * `executed_cacheable` - Task which is executed but is cacheable   * `executed_not_cacheable` - Task which is executed but is not cacheable   * `executed_unknown_cacheability` - Task which is executed and whose cacheability can not be determined   * `avoided_unknown_reason` - Task which was avoided for an unknown reason   * `lifecycle` - Lifecycle task   * `no-source` - No-source task   * `skipped` - Skipped task 
     *
     * Values: AVOIDED_UP_TO_DATE,AVOIDED_FROM_LOCAL_CACHE,AVOIDED_FROM_REMOTE_CACHE,EXECUTED_CACHEABLE,EXECUTED_NOT_CACHEABLE,EXECUTED_UNKNOWN_CACHEABILITY,AVOIDED_UNKNOWN_REASON,LIFECYCLE,NO_MINUS_SOURCE,SKIPPED
     */
    @Serializable
    enum class AvoidanceOutcome(val value: kotlin.String) {
        @SerialName(value = "avoided_up_to_date") AVOIDED_UP_TO_DATE("avoided_up_to_date"),
        @SerialName(value = "avoided_from_local_cache") AVOIDED_FROM_LOCAL_CACHE("avoided_from_local_cache"),
        @SerialName(value = "avoided_from_remote_cache") AVOIDED_FROM_REMOTE_CACHE("avoided_from_remote_cache"),
        @SerialName(value = "executed_cacheable") EXECUTED_CACHEABLE("executed_cacheable"),
        @SerialName(value = "executed_not_cacheable") EXECUTED_NOT_CACHEABLE("executed_not_cacheable"),
        @SerialName(value = "executed_unknown_cacheability") EXECUTED_UNKNOWN_CACHEABILITY("executed_unknown_cacheability"),
        @SerialName(value = "avoided_unknown_reason") AVOIDED_UNKNOWN_REASON("avoided_unknown_reason"),
        @SerialName(value = "lifecycle") LIFECYCLE("lifecycle"),
        @SerialName(value = "no-source") NO_MINUS_SOURCE("no-source"),
        @SerialName(value = "skipped") SKIPPED("skipped");
    }
    /**
     * The category of the non-cacheability reason:   * `build_cache_not_enabled` - Caching is not enabled for the build   * `cache-if_condition_not_matched` - Caching is disabled for the task via `org.gradle.api.tasks.TaskOutputs#cacheIf`   * `disabled_to_ensure_correctness` - The task failed validation. Available since Gradle 7.0   * `do-not-cache-if_condition_matched` - Caching is disabled for the task via `org.gradle.api.tasks.TaskOutputs#doNotCacheIf`   * `multiple_outputs_declared` - The task declares multiple outputs   * `no_outputs_declared` - The task has no outputs declared   * `non_cacheable_inputs` - One of the task inputs is not cacheable, either because some type used as an input to the task is loaded via a custom classloader, or a Java lambda is used as an input. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_task_action` - One of the task actions is not cacheable, either because it is loaded via a custom classloader, or a Java lambda is used to implement it. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_task_implementation` - The task implementation is not cacheable, either because it is loaded via a custom classloader, or a Java lambda is used to implement it. Available since Gradle 5.0 and before Gradle 7.5   * `non_cacheable_tree_output` - The task has a `org.gradle.api.file.FileTree` or a `org.gradle.api.internal.file.collections.DirectoryFileTree` as an output. Available since Gradle 5.0   * `overlapping_outputs` - The tasks outputs overlaps with another task. As Gradle cannot safely determine which task each output file belongs to, it disables caching               * `task_has_no_actions` - The task does not declare any actions   * `task_output_caching_not_enabled` - Caching is not enabled for the task   * `unknown` - Reason for disabled caching is not known  `null` when the task is cacheable or if the information is not available. 
     *
     * Values: BUILD_CACHE_NOT_ENABLED,CACHE_MINUS_IF_CONDITION_NOT_MATCHED,DISABLED_TO_ENSURE_CORRECTNESS,DO_MINUS_NOT_MINUS_CACHE_MINUS_IF_CONDITION_MATCHED,MULTIPLE_OUTPUTS_DECLARED,NO_OUTPUTS_DECLARED,NON_CACHEABLE_INPUTS,NON_CACHEABLE_TASK_ACTION,NON_CACHEABLE_TASK_IMPLEMENTATION,NON_CACHEABLE_TREE_OUTPUT,OVERLAPPING_OUTPUTS,TASK_HAS_NO_ACTIONS,TASK_OUTPUT_CACHING_NOT_ENABLED,UNKNOWN
     */
    @Serializable
    enum class NonCacheabilityCategory(val value: kotlin.String) {
        @SerialName(value = "build_cache_not_enabled") BUILD_CACHE_NOT_ENABLED("build_cache_not_enabled"),
        @SerialName(value = "cache-if_condition_not_matched") CACHE_MINUS_IF_CONDITION_NOT_MATCHED("cache-if_condition_not_matched"),
        @SerialName(value = "disabled_to_ensure_correctness") DISABLED_TO_ENSURE_CORRECTNESS("disabled_to_ensure_correctness"),
        @SerialName(value = "do-not-cache-if_condition_matched") DO_MINUS_NOT_MINUS_CACHE_MINUS_IF_CONDITION_MATCHED("do-not-cache-if_condition_matched"),
        @SerialName(value = "multiple_outputs_declared") MULTIPLE_OUTPUTS_DECLARED("multiple_outputs_declared"),
        @SerialName(value = "no_outputs_declared") NO_OUTPUTS_DECLARED("no_outputs_declared"),
        @SerialName(value = "non_cacheable_inputs") NON_CACHEABLE_INPUTS("non_cacheable_inputs"),
        @SerialName(value = "non_cacheable_task_action") NON_CACHEABLE_TASK_ACTION("non_cacheable_task_action"),
        @SerialName(value = "non_cacheable_task_implementation") NON_CACHEABLE_TASK_IMPLEMENTATION("non_cacheable_task_implementation"),
        @SerialName(value = "non_cacheable_tree_output") NON_CACHEABLE_TREE_OUTPUT("non_cacheable_tree_output"),
        @SerialName(value = "overlapping_outputs") OVERLAPPING_OUTPUTS("overlapping_outputs"),
        @SerialName(value = "task_has_no_actions") TASK_HAS_NO_ACTIONS("task_has_no_actions"),
        @SerialName(value = "task_output_caching_not_enabled") TASK_OUTPUT_CACHING_NOT_ENABLED("task_output_caching_not_enabled"),
        @SerialName(value = "unknown") UNKNOWN("unknown");
    }
    /**
     * The reason why the cache artifact is rejected:   * `artifact_size_too_large` - The size of the artifact is larger than the remote build cache can accept.  The value is `null` if the task is not cacheable, or if the attempt to store the artifact does not succeed. 
     *
     * Values: ARTIFACT_SIZE_TOO_LARGE
     */
    @Serializable
    enum class CacheArtifactRejectedReason(val value: kotlin.String) {
        @SerialName(value = "artifact_size_too_large") ARTIFACT_SIZE_TOO_LARGE("artifact_size_too_large");
    }
}

