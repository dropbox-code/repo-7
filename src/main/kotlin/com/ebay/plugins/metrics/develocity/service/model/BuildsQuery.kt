/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.ebay.plugins.metrics.develocity.service.model

import kotlinx.serialization.Contextual
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * 
 *
 * @param since **This parameter is deprecated, use `fromInstant` instead.** A unix-epoch-time in milliseconds allowing to retrieve builds for which Develocity completed receiving and processing the build after this instant. This parameter can only be used with `reverse=false`. Therefore, a value of `0` will process all builds. If not provided, the time in milliseconds when the request is received by the Develocity instance will be used. This parameter has no effect if any of `sinceBuild`, `fromInstant`, `fromBuild` are used. 
 * @param sinceBuild **This parameter is deprecated, use `fromBuild` instead.** A Build Scan ID allowing to retrieve builds for which Develocity completed receiving and processing after the given Build Scan ID (excluding it). This parameter can only be used with `reverse=false`. This parameter has precedence over any value set for the `since` parameter. A valid Build Scan ID must be provided, that is, a Build Scan ID that exists in the Develocity instance. A Build Scan ID for a deleted build is valid. This parameter has no effect if any of `fromInstant`, `fromBuild` are used. 
 * @param fromInstant A unix-epoch-time in milliseconds allowing to retrieve builds for which Develocity completed receiving and processing the build after this instant when used in conjunction with `reverse=false`, or before this instant when used in conjunction with `reverse=true`. Therefore, a value of `0` will process all builds. If not provided, the time in milliseconds when the request is received by the Develocity instance will be used. This parameter has no effect if `fromBuild` is used. 
 * @param fromBuild A Build Scan ID allowing to retrieve builds for which Develocity completed receiving and processing after the given Build Scan ID (excluding it) when used in conjunction with `reverse=false`, or before the given Build Scan ID (excluding it) when used in conjunction with `reverse=true`. This parameter has precedence over any value set for the `since`, `sinceBuild`, `fromInstant` parameters. A valid Build Scan ID must be provided, that is, a Build Scan ID that exists in the Develocity instance. A Build Scan ID for a deleted build is valid. 
 * @param reverse A boolean indicating the time direction of the query. A value of `true` indicates a backward query, and returned builds will be sorted from most to least recent. A value of `false` indicates a forward query, and returned builds will be sorted from least to most recent. This parameter has no effect if any of `since`, `sinceBuild` are used. If not provided, the default value is `false`. 
 * @param maxBuilds The maximum number of builds returned by the query. The query returns when that number is reached or when `maxWaitSecs` is reached. If not provided, the default value is `100`. 
 * @param maxWaitSecs The maximum number of seconds to wait for builds before returning. If this time is reached before `maxBuilds` is reached, the query returns with the already processed builds. Note that this time is respected with best effort. A query will return soon after this time has passed but there is no guarantee that it exactly returns before this time has passed. This parameter has no effect if `reverse=true` is specified, because new builds cannot become available in the past. If not provided, the default value is `3`. 
 * @param query A query for filtering builds, written in the Develocity advanced search query language See: https://gradle.com/help/advanced-search 
 * @param models The list of build models to return in the response for each build. If not provided, no models are returned. 
 * @param allModels Whether to include all build models for each build. If set to `true`, the value of the `models` parameter is ignored. 
 */
@Serializable

data class BuildsQuery (

    /* **This parameter is deprecated, use `fromInstant` instead.** A unix-epoch-time in milliseconds allowing to retrieve builds for which Develocity completed receiving and processing the build after this instant. This parameter can only be used with `reverse=false`. Therefore, a value of `0` will process all builds. If not provided, the time in milliseconds when the request is received by the Develocity instance will be used. This parameter has no effect if any of `sinceBuild`, `fromInstant`, `fromBuild` are used.  */
    @SerialName(value = "since")
    @Deprecated(message = "This property is deprecated.")
    val since: kotlin.Long? = null,

    /* **This parameter is deprecated, use `fromBuild` instead.** A Build Scan ID allowing to retrieve builds for which Develocity completed receiving and processing after the given Build Scan ID (excluding it). This parameter can only be used with `reverse=false`. This parameter has precedence over any value set for the `since` parameter. A valid Build Scan ID must be provided, that is, a Build Scan ID that exists in the Develocity instance. A Build Scan ID for a deleted build is valid. This parameter has no effect if any of `fromInstant`, `fromBuild` are used.  */
    @SerialName(value = "sinceBuild")
    @Deprecated(message = "This property is deprecated.")
    val sinceBuild: kotlin.String? = null,

    /* A unix-epoch-time in milliseconds allowing to retrieve builds for which Develocity completed receiving and processing the build after this instant when used in conjunction with `reverse=false`, or before this instant when used in conjunction with `reverse=true`. Therefore, a value of `0` will process all builds. If not provided, the time in milliseconds when the request is received by the Develocity instance will be used. This parameter has no effect if `fromBuild` is used.  */
    @SerialName(value = "fromInstant")
    val fromInstant: kotlin.Long? = null,

    /* A Build Scan ID allowing to retrieve builds for which Develocity completed receiving and processing after the given Build Scan ID (excluding it) when used in conjunction with `reverse=false`, or before the given Build Scan ID (excluding it) when used in conjunction with `reverse=true`. This parameter has precedence over any value set for the `since`, `sinceBuild`, `fromInstant` parameters. A valid Build Scan ID must be provided, that is, a Build Scan ID that exists in the Develocity instance. A Build Scan ID for a deleted build is valid.  */
    @SerialName(value = "fromBuild")
    val fromBuild: kotlin.String? = null,

    /* A boolean indicating the time direction of the query. A value of `true` indicates a backward query, and returned builds will be sorted from most to least recent. A value of `false` indicates a forward query, and returned builds will be sorted from least to most recent. This parameter has no effect if any of `since`, `sinceBuild` are used. If not provided, the default value is `false`.  */
    @SerialName(value = "reverse")
    val reverse: kotlin.Boolean? = null,

    /* The maximum number of builds returned by the query. The query returns when that number is reached or when `maxWaitSecs` is reached. If not provided, the default value is `100`.  */
    @SerialName(value = "maxBuilds")
    val maxBuilds: kotlin.Int? = null,

    /* The maximum number of seconds to wait for builds before returning. If this time is reached before `maxBuilds` is reached, the query returns with the already processed builds. Note that this time is respected with best effort. A query will return soon after this time has passed but there is no guarantee that it exactly returns before this time has passed. This parameter has no effect if `reverse=true` is specified, because new builds cannot become available in the past. If not provided, the default value is `3`.  */
    @SerialName(value = "maxWaitSecs")
    val maxWaitSecs: kotlin.Int? = null,

    /* A query for filtering builds, written in the Develocity advanced search query language See: https://gradle.com/help/advanced-search  */
    @SerialName(value = "query")
    val query: kotlin.String? = null,

    /* The list of build models to return in the response for each build. If not provided, no models are returned.  */
    @SerialName(value = "models")
    val models: kotlin.collections.List<@Contextual BuildModelName>? = null,

    /* Whether to include all build models for each build. If set to `true`, the value of the `models` parameter is ignored.  */
    @SerialName(value = "allModels")
    val allModels: kotlin.Boolean? = false

)

